constants:
  - name: webview.CALLBACK_RESULT_URL_OK
  - name: webview.CALLBACK_RESULT_URL_ERROR
  - name: webview.CALLBACK_RESULT_URL_LOADING
  - name: webview.CALLBACK_RESULT_EVAL_OK
  - name: webview.CALLBACK_RESULT_EVAL_ERROR

functions:
  - name: webview.create
    desc: "Creates a webview instance. It can show HTML pages as well as evaluate
    Javascript. The view remains hidden until the first call. There can exist a
    maximum of 4 webviews at the same time.

    [icon:ios] On iOS, the callback will never get a
    `webview.CALLBACK_RESULT_EVAL_ERROR`, due to the iOS SDK implementation."
    params:
      - type: function
        params:
          - name: self
            type: object
            desc: The calling script

          - name: webview_id
            type: number
            desc: The webview id

          - name: request_id
            type: number
            desc: The request id

          - name: type
            type: enum
            desc: The type of callback
            options:
              - webview.CALLBACK_RESULT_URL_OK
              - webview.CALLBACK_RESULT_URL_ERROR
              - webview.CALLBACK_RESULT_URL_LOADING
              - webview.CALLBACK_RESULT_EVAL_OK
              - webview.CALLBACK_RESULT_EVAL_ERROR

          - name: data
            type: table
            desc: A table holding the data
            fields:
              - name: url
                type: string
                desc: The url used in the <code>webview.open()</code> call. <code>nil</code> otherwise.
              - name: result
                type: string
                desc: "Holds the result of either: a failed url open, a successful
                      eval request or a failed eval. <code>nil</code> otherwise."

        name: callback
        desc: "A callback which receives info about finished requests taking the
              following parameters:"
    return:
      type: number
      desc: The id number of the webview

    examples:
      - code: |-
              local function webview_callback(self, webview_id, request_id, type, data)
                  if type == webview.CALLBACK_RESULT_URL_OK then
                      -- the page is now loaded, let's show it
                      webview.set_visible(webview_id, 1)
                  elseif type == webview.CALLBACK_RESULT_URL_ERROR then
                      print("Failed to load url: " .. data["url"])
                      print("Error: " .. data["error"])
                  elseif type == webview.CALLBACK_RESULT_URL_LOADING then
                      -- a page is loading
                      -- return false to prevent it from loading
                      -- return true or nil to continue loading the page
                      if data.url ~= "https://www.defold.com/" then
                          return false
                      end
                  elseif type == webview.CALLBACK_RESULT_EVAL_OK then
                      print("Eval ok. Result: " .. data['result'])
                  elseif type == webview.CALLBACK_RESULT_EVAL_ERROR then
                      print("Eval not ok. Request # " .. request_id)
                  end
              end
              local webview_id = webview.create(webview_callback)

  - name: webview.destroy
    desc: Destroys an instance of a webview.
    params:
      - name: webview_id
        type: number
        desc: The webview id (returned by the <code>webview.create()</code> call)

  - name: webview.open
    desc: Opens a web page in the webview, using an url. Once the request is done, the callback (registered in <code>webview.create()</code>) is invoked.
    params:
      - name: webview_id
        type: number
        desc: The webview id
      - name: url
        type: string
        desc: The url to open
      - name: options
        type: table
        desc: "A table of options for the request. Currently it holds these options:"
        fields:
          - name: hidden
            type: boolean
            desc: If true, the webview will stay hidden (default=false)
    examples:
      - code: |-
              local request_id = webview.open(webview_id, "http://www.defold.com", {hidden = true})

